//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdminPartOfSystem.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BotsAndProdsEntities1 : DbContext
    {
        public BotsAndProdsEntities1()
            : base("name=BotsAndProdsEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<AnswerOfSystem> AnswerOfSystem { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Question_Of_Customer> Question_Of_Customer { get; set; }
        public virtual DbSet<Request> Request { get; set; }
        public virtual DbSet<User> User { get; set; }
    
        public virtual ObjectResult<Authorize_Result> Authorize(string login, string pass)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Authorize_Result>("Authorize", loginParameter, passParameter);
        }
    
        public virtual int Change_Amount_Of_Product(Nullable<long> id, Nullable<int> amount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Change_Amount_Of_Product", idParameter, amountParameter);
        }
    
        public virtual ObjectResult<Get_Customer_Result> Get_Customer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Customer_Result>("Get_Customer", idParameter);
        }
    
        public virtual ObjectResult<Get_Customers_Result> Get_Customers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Customers_Result>("Get_Customers");
        }
    
        public virtual ObjectResult<Get_Product_By_ID_Result> Get_Product_By_ID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Product_By_ID_Result>("Get_Product_By_ID", idParameter);
        }
    
        public virtual ObjectResult<Get_Products_Result> Get_Products()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Products_Result>("Get_Products");
        }
    
        public virtual ObjectResult<Get_Request_By_Client_And_Date_Result> Get_Request_By_Client_And_Date(Nullable<int> clientId, Nullable<System.DateTime> date)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Request_By_Client_And_Date_Result>("Get_Request_By_Client_And_Date", clientIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<Get_User_ById_Result> Get_User_ById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_User_ById_Result>("Get_User_ById", idParameter);
        }
    
        public virtual ObjectResult<Get_Users_Result> Get_Users()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Users_Result>("Get_Users");
        }
    
        public virtual int Insert_Customer(string name, string phoneNumber)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Customer", nameParameter, phoneNumberParameter);
        }
    
        public virtual int Insert_Product(string name, Nullable<float> price)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Product", nameParameter, priceParameter);
        }
    }
}
